[{"title":"部分linux基本命令","date":"2017-07-20T01:57:00.000Z","path":"2017/07/20/linux基本命令/","text":"新建文件夹mkdir a //新建文件夹a ll //查看当前目录下的文件目录 详情 ls //查看当前目录下的文件目录 名称 cd a //转到a目录下 pwd //查看当前目录路径 cd .. //返回上一级目录 rm -rf a //删除文件夹a vi a.js //添加文件a.js cp a.js a1.js //拷贝文件a.js到a1.js mdkir src mv a1.js src/a1.js //移动a1.js到src文件夹下 rm a.js //删除文件 编辑文件vi/vim a.js //创建文件a.js，并编辑 i //进入编辑状态 Esc //退出编辑状态 Esc-&gt;:w //保存 Esc-&gt;:q //退出 Esc-&gt;:wq //保存并退出 查看文件内容vi a.js cat a.js //查看文件全部内容 head a.js //查看文件一开始的部分 tail a.js //查看文件末尾的部分 head -n 1 a.js //查看文件前一行 tail -n 2 a.js //查看文件后两行 grep &apos;2&apos; a.js //查看文件中出现‘2’的行 grep -v &apos;2&apos; a.js //查看文件中不出现‘2’的行","tags":[{"name":"面试","slug":"面试","permalink":"http://feixiaoxiaojia.github.io/tags/面试/"}]},{"title":"上线回滚流程要点","date":"2017-07-20T01:12:02.855Z","path":"2017/07/20/上线流程要点/","text":"上线流程要点 将测试完成的代码提交到git版本库的master分支 将当前服务器的代码全部打包并记录版本号，备份（如，v1.0） 将master分支的代码提交覆盖到线上服务器，生成新版本号（如，v1.1） 回滚流程要点 将当前服务器的代码打包并记录版本号，备份（如，v1.1） 将备份的上一个版本（如v1.0）号解压，覆盖到线上服务器，并生成新版本号（如，v1.2）","tags":[{"name":"面试","slug":"面试","permalink":"http://feixiaoxiaojia.github.io/tags/面试/"}]},{"title":"方法定义","date":"2017-07-19T03:26:00.000Z","path":"2017/07/19/Call_apply区别/","text":"转载：https://cwjinterview.github.io/2017/04/23/Call_apply区别/ Call方法语法：语法：call([thisObj[,arg1[, arg2[, [,.argN]]]]]) 定义：调用一个对象的一个方法，以另一个对象替换当前对象。 说明： call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 apply方法语法：apply([thisObj[,argArray]]) 定义：应用某一对象的一个方法，用另一个对象替换当前对象。 说明： 如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 唯一区别是apply接受的是数组参数，call接受的是连续参数。 实例&lt;script&gt; function add(j, k){ console.log(j+k); } function sub(j, k){ console.log(j-k); } add(5,3); //8 add.call(sub, 5, 3); //8 add.apply(sub, [5, 3]); //8 sub(5, 3); //2 sub.call(add, 5, 3); //2 sub.apply(add, [5, 3]); //2 &lt;/script&gt; 通过call和apply，我们可以实现对象继承。示例：var Parent = function(){ this.name = &quot;yjc&quot;; this.age = 22; } var child = {}; console.log(child);//Object {} ,空对象 Parent.call(child); console.log(child); //Object {name: &quot;yjc&quot;, age: 22} call、apply有什么作用我们经常会在我们项目中做一些通用的对象，这些对象用来处理我们的一些通用的过程。 /*通用验证对象*/ var validator = { validateName : function(){ console.log(this.name); }, validateAge : function(){ console.log(this.age) } //..... } /*对象kobe*/ var kobe = { name : &apos;kobe bryant&apos;, age : -1 } /*对象 allen*/ var allen = { name : &apos;allen iverson&apos;, age : 10 } var isKobeAgeValid = validator.call(kobe); var isAllenAgeValid = validator.call(allen); 用处与区别 call, apply作用就是借用别人的方法来调用,就像调用自己的一样. call, apply方法区别是,从第二个参数起, call方法参数将依次传递给借用的方法作参数, 而apply直接将这些参数放到一个数组中再传递, 最后借用方法的参数列表是一样的。","tags":[{"name":"call/apply","slug":"call-apply","permalink":"http://feixiaoxiaojia.github.io/tags/call-apply/"}]},{"title":"Hello World","date":"2017-07-19T02:24:04.185Z","path":"2017/07/19/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"JS中的计时器方法","date":"2017-07-16T10:02:00.000Z","path":"2017/07/16/countClock/","text":"题目描述实现一个打点计时器，要求 1、从 start 到 end（包含 start 和 end），每隔 100 毫秒 console.log 一个数字，每次数字增幅为 1 2、返回的对象中需要包含一个 cancel 方法，用于停止定时操作3、第一个数需要立即输出 思路 方法描述setInterval周期性的调用一个函数(function)或者执行一段代码clearInterval取消调用setInterval设置的重复执行动作setTimeout在指定的延迟时间之后调用一个函数(function)或者执行一段代码片段clearTimeout方法可取消由setTimeout方法设置的timeout 例子var id=setInterval(function(){ consoel.log(&quot;log&quot;) },1000) clearInterval(id); var id=setTimeout(function() { alert(&quot;Hello World!&quot;); }, 500); clearTimeout(id); 提示：setTimeout()止执行一次code。如果要多次调用，可以使用setInterval()或者让code自身再次调用setTimeout(). 解题方法setInterval方法function count(start, end) { console.log(start); var id=setInterval(function(){ if(start&lt;end){ console.log(++start); } },100); return { cancel:function(){ clearInterval(id); } } } //测试调用 var cancel=count(1,1000); cancel.cancel();//即可停止计数 setTimeout方法function count(start,end){ if(start&lt;=end){ console.log(start++); id=setTimeout(function(){ count(start,end); },100); } return { cancel:function(){ clearTimeout(id); } } } //测试调用 var cancel=count(1,1000); cancel.cancel();//即可停止计数","tags":[{"name":"腾讯课堂笔试题","slug":"腾讯课堂笔试题","permalink":"http://feixiaoxiaojia.github.io/tags/腾讯课堂笔试题/"}]}]